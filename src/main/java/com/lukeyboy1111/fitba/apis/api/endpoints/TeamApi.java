/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.lukeyboy1111.fitba.apis.api.endpoints;

import java.util.List;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.lukeyboy1111.fitba.apis.model.FitbaTeam;
import com.lukeyboy1111.fitba.apis.model.FitbaPlayer;
import com.lukeyboy1111.fitba.apis.support.FitbaConstants;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-10-09T16:11:27.745Z")

@Api(value = "team")
@CrossOrigin(origins = "*", methods= {RequestMethod.GET, RequestMethod.PUT, RequestMethod.POST, RequestMethod.DELETE, RequestMethod.OPTIONS})
public interface TeamApi 
{

    
    @ApiOperation(value = "Fetch a a team", notes = "Returns a team based on a supplied ID", response = FitbaTeam.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "team response", response = FitbaTeam.class) 
        })
    @RequestMapping(value = "/fitbaTeam/{id}",
        produces = { FitbaConstants.APPLICATION_JSON }, 
        method = RequestMethod.GET)
    @CrossOrigin(origins = "*", methods= {RequestMethod.GET})
    ResponseEntity<FitbaTeam> findFitbaTeamById(@ApiParam(value = "ID of team to lookup",required=true ) @PathVariable("id") String id);
    
    @ApiOperation(value = "Create a new team", notes = "Saves a new team in the database", response = FitbaTeam.class, tags={  })
    @ApiResponses(value = { 
            @ApiResponse(code = 201, message = "team response", response = FitbaTeam.class)
            })
    @RequestMapping(value = "/fitbaTeam",
        produces = { FitbaConstants.APPLICATION_JSON }, 
        consumes = { FitbaConstants.APPLICATION_JSON },
        method = RequestMethod.PUT)
    @CrossOrigin(origins = "*", methods= {RequestMethod.PUT})
    ResponseEntity<FitbaTeam> saveNewTeam(@ApiParam(value="The new team to save", required=true) @RequestBody FitbaTeam teamToSave);
    
    @RequestMapping(value = "/fitbaTeam/{id}/fitbaPlayer",
            produces = { FitbaConstants.APPLICATION_JSON }, 
            consumes = { FitbaConstants.APPLICATION_JSON },
            method = RequestMethod.POST)
    @CrossOrigin(origins = "*", methods= {RequestMethod.POST})
    ResponseEntity<FitbaTeam> addNewPlayerToTeam(
            @ApiParam(value = "ID of team to add fitbaPlayer to",required=true ) @PathVariable("id") String id,
            @ApiParam(value = "The details of the new fitbaPlayer to add",required=true ) @RequestBody FitbaPlayer newPlayer);

    @RequestMapping(value = "/fitbaTeam/{teamId}", produces = { FitbaConstants.APPLICATION_JSON }, consumes = { FitbaConstants.APPLICATION_JSON }, method = RequestMethod.POST)
    @CrossOrigin(origins = "*", methods= {RequestMethod.POST})
    ResponseEntity<FitbaTeam> updateFitbaTeam(
            @ApiParam(value = "ID of team to add fitbaPlayer to",required=true ) @PathVariable("id") String id,
            @ApiParam(value = "The new value of the team name",required=true ) @PathVariable("name") String name,
            @ApiParam(value = "The new value of the team number",required=true ) @PathVariable("number") String number,
            @ApiParam(value = "The new value of the team description",required=true ) @PathVariable("description") String description);
    
    @RequestMapping(value = "/fitbaTeam/{teamId}/fitbaPlayer/{fitbaPlayerId}",
            produces = { FitbaConstants.APPLICATION_JSON }, 
            consumes = { FitbaConstants.APPLICATION_JSON },
            method = RequestMethod.DELETE)
    @CrossOrigin(origins = "*", methods= {RequestMethod.DELETE})
    ResponseEntity<FitbaTeam> deleteFitbaPlayerForTeam(
            @ApiParam(value = "ID of team to delete the fitbaPlayer from",required=true ) @PathVariable("id") String id,
            @ApiParam(value = "ID of of the fitbaPlayer to delete",required=true ) @PathVariable("fitbaPlayerId") String fitbaPlayerId);
    
    @RequestMapping(value = "/fitbaTeam/{teamId}/fitbaPlayer/{fitbaPlayerId}",
            produces = { FitbaConstants.APPLICATION_JSON }, 
            consumes = { FitbaConstants.APPLICATION_JSON },
            method = RequestMethod.GET)
    @CrossOrigin(origins = "*", methods= {RequestMethod.GET})
    ResponseEntity<FitbaPlayer> fetchFitbaPlayerById(
            @ApiParam(value = "ID of team that contains the fitbaPlayer",required=true ) @PathVariable("teamId") String teamId,
            @ApiParam(value = "ID of of the fitbaPlayer",required=true ) @PathVariable("fitbaPlayerId") String fitbaPlayerId);

    
    @RequestMapping(value = "/fitbaTeam/{teamId}/fitbaPlayer/{fitbaPlayerId}",
            produces = { FitbaConstants.APPLICATION_JSON }, 
            consumes = { FitbaConstants.APPLICATION_JSON },
            method = RequestMethod.POST)
    @CrossOrigin(origins = "*", methods= {RequestMethod.POST})
    ResponseEntity<FitbaPlayer> savePlayer(
            @ApiParam(value = "ID of team that contains the fitbaPlayer",required=true ) @PathVariable("teamId") String teamId,
            @ApiParam(value = "ID of of the fitbaPlayer to save",required=true ) @PathVariable("fitbaPlayerId") String fitbaPlayerId, 
            @RequestBody FitbaPlayer fitbaPlayer);

    @ApiOperation(value="Fetch all teams", notes= "some notes here", responseContainer="List")
    @ApiResponses(value = { 
            @ApiResponse(code = 201, message = "team response", responseContainer="List") })
    @RequestMapping(value="/fitbaTeams",
            produces = { FitbaConstants.APPLICATION_JSON },
            method = RequestMethod.GET)
    @CrossOrigin(origins = "*", methods= {RequestMethod.GET})
    ResponseEntity<List<FitbaTeam>> getAllTeams();
    
    @ApiOperation(value="Fetch all fitba players for a team", notes= "some notes here", responseContainer="List")
    @ApiResponses(value = { 
            @ApiResponse(code = 201, message = "fitbaPlayer response", responseContainer="List") })
    @RequestMapping(value="/fitbaTeam/{teamId}/fitbaPlayers",
            produces = { FitbaConstants.APPLICATION_JSON },
            method = RequestMethod.GET)
    @CrossOrigin(origins = "*", methods= {RequestMethod.GET})
    ResponseEntity<List<FitbaPlayer>> getAllPlayersForFitbaTeam(@ApiParam(value = "ID of team",required=true ) @PathVariable("teamId") String teamId);
}
    